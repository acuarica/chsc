root = f1 0

f1 x = f2 y ++ f2 (y `add'Int` 1)
  where y = (x `add'Int` 1) * 2
f2 x = f3 y ++ f3 (y `add'Int` 1)
  where y = (x `add'Int` 1) * 2
f3 x = [x `add'Int` 1]

(++) xs ys = case xs of
    [] -> ys
    (z:zs) -> z : (zs ++ ys)

null xs = case xs of [] -> True; (y:ys) -> False

tests = [
    (null root, False)
  ]
