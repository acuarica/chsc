{-
import Prelude hiding ((++), null)

main = print (null root)
-}

root = f 0

f x = if x `lte'Int` 100 then f y ++ f (y `add'Int` 1) else [x `add'Int` 1]
  where y = (x `add'Int` 1) * 2

(++) xs ys = case xs of
    [] -> ys
    (z:zs) -> z : (zs ++ ys)

null xs = case xs of [] -> True; (y:ys) -> False

tests = [
    (null root, False)
  ]
