#include "../Prelude.core"

flip t = case t of
    (Leaf x) -> Leaf x
    (Branch l r) -> Branch (flip l) (flip r)

sumtr t = case t of
    Leaf x -> x
    Branch l r -> sumtr l `add'Int` sumtr r

buildTree n t = case n `eq'Int` 0 of
    True -> t
    False -> buildTree (n`subtract'Int`1) (Branch t t)

--root :: Int -> Int
root n = sumtr (flip (flip (buildTree n (Leaf 1))))

tests = [
    (root 22, 4194304)
  ]
