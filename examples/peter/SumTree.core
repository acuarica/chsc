#include "../Prelude.core"

-- What Supero 3 does:
--  * Unrolls buildTree so it does two iterations before recursing back to the start
--  * Totally eliminates the intermediate tree containing the squared values: the sum is done directly on the output of buildTreee

sumtr t = case t of
    Leaf x -> x
    Branch l r -> sumtr l `add'Int` sumtr r

squaretr t = case t of
    Leaf x -> Leaf (x `multiply'Int` x)
    Branch l r -> Branch (squaretr l) (squaretr r)

buildTree n t = case n `eq'Int` 0 of
    True -> t
    False -> buildTree (n `subtract'Int` 1) (Branch t t)

--root :: Int -> Int
root n = sumtr (squaretr (buildTree n (Leaf 1)))

tests = [
    (root 22, 4194304)
  ]