#include "../Prelude.core"

-- Compute digits of e
-- Due to John Hughes, Aug 2001

-- Here's a way to compute all the digits of e. We use the series
-- 
--    e = 2  +  1  +  1  +  1  +  ...
--              --    --    --  
--              2!    3!    4!
-- 
-- which we can think of as representing e as 2.11111... in a strange
-- number system with a varying base. In this number system, the fraction
-- 0.abcd... represents
-- 
--              a  +  b  +  c  +  d  +  ...
--       --    --    --    --
--       2!    3!    4!    5!
-- 
-- To convert such a fraction to decimal, we multiply by 10, take the
-- integer part for the next digit, and continue with the fractional
-- part. Multiplying by 10 is easy: we just multiply each "digit" by 10,
-- and then propagate carries.
-- 
-- The hard part is knowing how far carries might propagate: since we
-- carry leftwards in an infinite expansion, we must be careful to avoid
-- needing to inspect the entire fraction in order to decide on the first
-- carry. But each fraction we work with is less than one, so after
-- multiplying by 10, it is less than 10. The "carry out" from each digit
-- can be at most 9, therefore. So if a carry of 9 from the next digit
-- would not affect the carry out from the current one, then that carry
-- out can be emitted immediately. Since the base soon becomes much
-- larger than 10, then this is likely to happen quickly. No doubt there
-- are much better ways than this of solving the problem, but this one
-- works.

carryPropagate base ds
  = case ds of (d:ds) -> let carryguess = d `div'Int` base
                             rerootder = d `mod` base
                             nextcarry:fraction = carryPropagate (base+1) ds
                             dCorrected = d + nextcarry
                         in if carryguess `eq'Int` (d+9) `div'Int` base 
                             then carryguess : (rerootder+nextcarry) : fraction
                             else (dCorrected `div'Int` base) : (dCorrected `mod` base) : fraction
e = ("2."++) $ 
    tail . concat $
    map (show.head) $
    iterate (carryPropagate 2 . map (\x -> 10*x) . tail) $
    2:repeat 1

root = \digits -> take digits e

tests = [
    (root 1000, "2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901157383418793070215408914993488416750924476146066808226480016847741185374234544243710753907774499206955170276183860626133138458300075204493382656029760673711320070932870912744374704723069697720931014169283681902551510865746377211125238978442505695369677078544996996794686445490598793163688923009879312773617821542499922957635148220826989519366803318252886939849646510582093923982948879332036250944311730123819706841614039701983767932068328237646480429531180232878250981945581530175671736133206981125099618188159304169035159888851934580727386673858942287922849989208680582574927961048419844436346324496848756023362482704197862320900216099023530436994184914631409343173814364054625315209618369088870701676839642437814059271456354906130310720851038375051011574770417189861068739696552126715468895703503"),
    (root 2000, "2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749279610484198444363463244968487560233624827041978623209002160990235304369941849146314093431738143640546253152096183690888707016768396424378140592714563549061303107208510383750510115747704171898610687396965521267154688957035035402123407849819334321068170121005627880235193033224745015853904730419957777093503660416997329725088687696640355570716226844716256079882651787134195124665201030592123667719432527867539855894489697096409754591856956380236370162112047742722836489613422516445078182442352948636372141740238893441247963574370263755294448337998016125492278509257782562092622648326277933386566481627725164019105900491644998289315056604725802778631864155195653244258698294695930801915298721172556347546396447910145904090586298496791287406870504895858671747985466775757320568128845920541334053922000113786300945560688166740016984205580403363795376452030402432256613527836951177883863874439662532249850654995886234281899707733276171783928034946501434558897071942586398772754710962953741521115136835062752602326484728703920764310059584116612054529703023647254929666938115137322753645098889031360205724817658511806303644281231496550704751025446501172721155519486685080036853228183152196003735625279449515828418829478761085263981")
    -- Very slow and use lots of memory:
    --(root 2700, "2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350354021234078498193343210681701210056278802351930332247450158539047304199577770935036604169973297250886876966403555707162268447162560798826517871341951246652010305921236677194325278675398558944896970964097545918569563802363701621120477427228364896134225164450781824423529486363721417402388934412479635743702637552944483379980161254922785092577825620926226483262779333865664816277251640191059004916449982893150566047258027786318641551956532442586982946959308019152987211725563475463964479101459040905862984967912874068705048958586717479854667757573205681288459205413340539220001137863009455606881667400169842055804033637953764520304024322566135278369511778838638744396625322498506549958862342818997077332761717839280349465014345588970719425863987727547109629537415211151368350627526023264847287039207643100595841166120545297030236472549296669381151373227536450988890313602057248176585118063036442812314965507047510254465011727211555194866850800368532281831521960037356252794495158284188294787610852639813955990067376482922443752871846245780361929819713991475644882626039033814418232625150974827987779964373089970388867782271383605772978824125611907176639465070633045279546618550966661856647097113444740160704626215680717481877844371436988218559670959102596862002353718588748569652200050311734392073211390803293634479727355955277349071783793421637012050054513263835440001863239914907054797780566978533580489669062951194324730995876552368128590413832411607226029983305353708761389396391779574540161372236187893652605381558415871869255386061647798340254351284396129460352913325942794904337299085731580290958631382683291477116396337092400316894586360606458459251269946557248391865642097526850823075442545993")
  ]
