#include "../Prelude.core"

con :: Tag -> Expr
con tag = Con tag []

app :: Expr -> [Expr] -> Expr
app expr args = case args of
  [] -> expr
  arg:args' -> app (App expr arg) args'

zero, suc, nil, cons :: Expr
zero = con "Zero"
suc = con "Succ"
nil = con "Nil"
cons = con "Cons"

nat :: Int -> Expr
nat n = if n > 0 then App suc (nat (n - 1)) else zero

--instance Functor Parser where
fmap' :: (a -> b) -> Parser a -> Parser b
fmap' f parser =
  case parser of
    Parser parse -> Parser (\s ->
      case parse s of
        Error msg -> Error msg
        Done a chars rest -> Done (f a) chars rest
      )

--instance Applicative Parser where
pure' :: a -> Parser a
pure' a = Parser (Done a 0)


(<*>!) :: Parser (a -> b) -> Parser a -> Parser b
(<*>!) op v = case op of
  Parser pf -> case v of
    Parser p -> Parser (\s ->
      case pf s of
        Error msg -> Error msg
        Done f chars rest -> case p rest of
          Error msg' -> Error msg'
          Done a chars' rest' -> Done (f a) (chars+chars') rest'
      )

--instance Monad Parser where
return' :: a -> Parser a
return' = pure'

(>>=!) :: Parser a -> (a -> Parser b) -> Parser b
(>>=!) pr f = case pr of
  Parser p -> Parser (\s ->
    case p s of
      Error msg -> Error msg
      Done a chars rest -> case parse (f a) rest of
        Error msg' -> Error msg'
        Done b chars' rest' -> Done b (chars+chars') rest'
    )

(>>!) :: Parser a -> Parser b -> Parser b
(>>!) p q = p >>=! (\_x -> q)

--instance Alternative Parser where
empty :: Parser a
empty = Parser (const (Error "Empty parser"))

(<|>) :: Parser a -> Parser a -> Parser a
(<|>) pr qr = case pr of
  Parser p -> case qr of
    Parser q -> Parser (\s ->
      case p s of
        Error msg'p -> case q s of
          Error msg'q -> Error (msg'p ++ " or " ++ msg'q)
          done -> done
        done -> done
        )

some :: Parser a -> Parser [a]
some v = some_v
  where
    many_v = some_v <|> pure' []
    some_v = (fmap' (:) v) <*>! many_v

many :: Parser a -> Parser [a]
many v = many_v
  where
    many_v = some_v <|> pure' []
    some_v = (fmap' (:) v) <*>! many_v


-- | Parses a char.
item :: Parser Char
item = Parser (\s -> case s of
    []     -> Error "Reached EOF"
    (c:cs) -> Done c 1 cs)

satisfy :: String -> (Char -> Bool) -> Parser Char
satisfy msg pred = (>>=!) item (\c ->
  if pred c
    then return' c
    else Parser (const (Error (c: "expecting  got " ++ msg ))))

oneOf :: String -> Parser Char
oneOf s = satisfy s (`elem` s)

char :: Char -> Parser Char
char c = satisfy [c] (c ==)

natural :: Parser Integer
natural = fmap' read (some (satisfy "isDigit" isDigit))

string :: String -> Parser String
--string [] = return []
--string (c:cs) = do { char c; string cs; return (c:cs)}
string s = case s of
  [] -> return' []
  (c:cs) -> char c >>! string cs >>! return' (c:cs)

token :: Parser a -> Parser a
--token p = do { a <- p; spaces ; return a}
token p = p >>=! (\a -> spaces >>! return' a)

reserved :: String -> Parser String
reserved s = token (string s)

spaces :: Parser String
spaces = many $ oneOf " \n\r"

digit :: Parser Char
digit = satisfy "isdigit" isDigit

alpha :: Parser Char
alpha = satisfy "isalpha" isAlpha

loweralpha :: Parser Char
loweralpha = satisfy "loweralpha" (\c -> isAlpha c && isLower c)

upperalpha :: Parser Char
upperalpha = satisfy "upperalpha" (\c -> isAlpha c && isUpper c)

dollar :: Parser Char
dollar = satisfy "dollar sign" (== '$')

underscore :: Parser Char
underscore = satisfy "underscore" (== '_')

quote :: Parser Char
quote = satisfy "quote" (== '\'')

number :: Parser Int
--number = do
--  s <- string "-" <|> return []
--  cs <- some digit
--  spaces
--  return (read (s ++ cs))
number =
  (string "-" <|> return' []) >>=! ( \s ->
  some digit >>=! ( \cs ->
  spaces >>!
  return' (read (s ++ cs))
  ))

lowerword :: Parser String
lowerword =
  loweralpha >>=! (\c->
  many alpha >>=! (\cs->
  spaces >>!
  return' (c:cs)
  ))

upperword :: Parser String
upperword =
  upperalpha >>=! (\c->
  many alpha >>=! (\cs->
  spaces >>!
  return' (c:cs)
  ))

sat :: String -> Parser String -> (String -> Bool) -> Parser String
sat msg p pred = (>>=!) p (\s -> if pred s
    then return' s
    else Parser (const (Error ("expecting %s got %s" ++ msg ++ s))))

paired:: String -> String -> Parser a -> Parser a
paired o c m = reserved o >>! m >>=! (\n-> reserved c >>! return' n )

parens :: Parser a -> Parser a
parens = paired "(" ")"

braces :: Parser a -> Parser a
braces = paired "{" "}"

brackets :: Parser a -> Parser a
brackets = paired "[" "]"

chainl1 :: Parser a -> Parser (a -> a -> a) -> Parser a
chainl1 p op = p >>=! \a -> rest a
  where rest a = (op >>=! (\f -> p >>=! \b-> rest (f a b))) <|> return' a

chainr1 :: Parser a -> Parser (a -> a -> a) -> Parser a
chainr1 p op = p >>=! \a -> rest a
  where rest a = (op >>=! \f->  p >>=! \b->  rest b>>=! \b'-> return' (f a b'))
          <|> return' a

exprp :: Parser Expr
exprp = (termp `chainr1` conslistp) `chainl1` return' App

conslistp :: Parser (Expr -> Expr -> Expr)
conslistp = reserved ":" >>! return' (App . App cons)

termp :: Parser Expr
termp = litintp
    <|> letp
    <|> casep
    <|> varp
    <|> conp
    <|> braces lamp
    <|> parens exprp
    <|> brackets listp

litintp :: Parser Expr
litintp = number >>=! \n-> return' (nat n)

letp :: Parser Expr
letp =
  reserved "let" >>!
  bindsp >>=! \binds ->
  --var <- varnamep
  --reserved "="
  --valexpr <- exprp
  reserved "in" >>!
  exprp >>=! \inexpr ->
  return' (Let binds inexpr)

bindsp :: Parser [Binding]
bindsp =
        varnamep >>=! \var->
        reserved "=" >>!
        exprp >>=! \valexpr ->
        (
          reserved ";" >>!
          bindsp >>=! \binds ->
          return' ((var, valexpr):binds) ) <|>
          return' [(var, valexpr)]

varp :: Parser Expr
varp =
  varnamep >>=! \var->
  return' (Var var)

conp :: Parser Expr
conp = upperword >>=! \tag-> return' (con tag)

lamp :: Parser Expr
lamp =
  varnamep >>=! \var->
  reserved "->" >>!
  exprp >>=! \valexpr ->
  return' (Lam var valexpr)

casep :: Parser Expr
casep =
  reserved "case" >>!
  exprp >>=! \scexpr ->
  reserved "of" >>!
  some altp >>=! \alts->
  return' (Case scexpr alts)

altp :: Parser (Pat, Expr)
altp =
  upperword >>=! \tag->
  many varnamep >>=! \vars->
  reserved "->" >>!
  exprp >>=! \res->
  reserved ";" >>!
  return' (Pat tag vars, res)

listp :: Parser Expr
listp = (
      exprp >>=! \item ->
      (
        reserved "," >>!
        listp >>=! \rest->
        return' (app cons [item, rest])) <|>
        return' (app cons [item, nil])
    ) <|> return' nil

varnamep :: Parser Var
varnamep = sat ("show keywords") varid (not . (`elem` keywords))
  where keywords = ["let", "in", "case", "of"]

varid :: Parser Var
varid =
  loweralpha <|> dollar <|> underscore >>=! \c->
  many (alpha <|> digit <|> underscore <|> quote) >>=! \cs->
  spaces >>!
  return' (c:cs)

parseWith :: Parser Expr -> String -> Expr
parseWith p s =
  case parse (spaces >>! p) s of
    Done a chars rest -> case rest of
      [] -> a
      _ -> error $ "Parser didn't consume entire stream: <<" ++ rest ++ ">> " ++
        " in <<" ++ s ++ ">> at " ++ show chars ++
                   " with (expr ommited by --show--)"
    Error msg  -> error $ "Parser error: %s in ``%s''" ++ msg ++ s

{-|
  Given a textual representation of Expr, returns the parsed Expr.
-}
parseExpr :: String -> Expr
parseExpr = parseWith exprp

root = parseExpr

preludeExpr :: String
preludeExpr =
  "let \
  \  id = {a->a} ;\
  \  app = {p->{q->p q}} ;\
  \  inc = {n->Succ n} ;\
  \  copyN = {n->case n of \
  \    Zero -> 0;\
  \    Succ n' -> Succ (copyN n');\
  \  };\
  \  append = {xs->{ys->case xs of \
  \    Nil -> ys;\
  \    Cons x xs' -> Cons x (append xs' ys);\
  \  }};\
  \  reverse' = {xs->case xs of \
  \    Nil -> Nil;\
  \    Cons x xs' -> append (reverse' xs') [x];\
  \  };\
  \  reverse = {xs-> \
  \    let reverseAccum = {xs->{as->case xs of \
  \      Nil -> as;\
  \      Cons y ys -> reverseAccum ys (Cons y as);\
  \    }} in reverseAccum xs [] }  ;\
  \  map = {f->{xs->case xs of \
  \    Nil->Nil;\
  \    Cons y ys->Cons (f y)(map f ys);\
  \  }};\
  \  plus = {n->{m->case n of \
  \    Zero->m;\
  \    Succ nn->plus nn (Succ m);\
  \  }};\
  \  mult = {n->{m->case n of \
  \    Zero->0;\
  \    Succ nn->plus (mult nn m) m;\
  \  }};\
  \  len = {xs->case xs of Nil->0; Cons y ys->Succ (len ys);} ; \
  \  head = {xs->case xs of Cons y ys -> y; } ; \
  \  tail = {xs->case xs of Cons y ys -> ys; } ; \
  \  inf = {n->Cons n (inf (Succ n))} ; \
  \  infA = Cons A inf in "

prelude10 = preludeExpr ++ preludeExpr ++ preludeExpr ++ preludeExpr ++ preludeExpr
   ++ preludeExpr ++ preludeExpr ++ preludeExpr ++ preludeExpr ++ preludeExpr

prelude100 = prelude10 ++ prelude10 ++ prelude10 ++ prelude10 ++ prelude10
  ++ prelude10 ++ prelude10 ++ prelude10 ++ prelude10 ++ prelude10

prelude1m = prelude100 ++ prelude100
     ++ prelude100
  ++ prelude100
  ++ prelude100
  ++ prelude100
  ++ prelude100
   ++ prelude100
  ++ prelude100
  ++ prelude100


tests = [
    -- (root "f x", App (Var "f") (Var "x")),
    -- (root "f (g x)", App (Var "f") (App (Var "g") (Var "x")) ),
    (root (prelude1m ++ "x"), Var "?")
  ]

