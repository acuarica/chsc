#include "../Prelude.core"

eqList :: [a] -> [a] -> Bool
eqList xs ys = case xs of
  [] -> case ys of
    [] -> True
    _ -> False
  (x:xs') -> case ys of
    (y:ys') -> x == y && eqList xs' ys'
    _ -> False

root :: Char -> Bool
root c = c == '$' ||
  -- elem [c] ["$"]  -- OK
  [c] `eqList` "$"  -- Error: Couldn't match expected type ‘[Char]’ with actual type ‘Char’

-- append xs ys = case xs of
--   [] -> ys
--   (x:xs') -> x: append xs' ys

-- reverse2 xs = case xs of
--   [] -> []
--   (x:xs') -> append (reverse2 xs') [x]

-- revacc xs as = case xs of
--   [] -> []
--   (x:xs') -> revacc xs' (x:as)

-- revacc' xs = revacc xs []

-- inc x = x + 1

-- -- root = revacc'
-- root x y = ( map inc [1,2,x], map not [True, y] )

--   -- in (map (+1) [1, 2, 3], map not [True, False])

-- tests = [(root [1,2,3], [3,2,1])]
-- tests = [(root [1,2,3], [])]
-- tests = [(root 4 False, ([2,3,4], [False, True]))]
tests = [(root '$', True)]
